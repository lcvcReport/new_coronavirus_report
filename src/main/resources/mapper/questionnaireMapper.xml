<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 指明这个映射文件adminMapper.xml的逻辑路径,如果与接口建立映射，那么逻辑路径应该与接口的物理路径一致-->
<mapper namespace="com.lcvc.new_coronavirus_report.dao.QuestionnaireDao">
    <!--==================================基本查询============================-->
    <select id="get"  resultType="Questionnaire">
        select * from questionnaire where id=#{id}
    </select>

    <insert id="save"  useGeneratedKeys="true" keyProperty="id">
      insert into questionnaire(id,identity,teacherNumber,studentNumber,sex,name,registeredPlace,
      identityCard,tel,department,workType,practice,practiceWorkStatus,comefromHuBei,comefromWuHan,arriveHuBei,arriveWuHan,stayInHubei,epidemicArea,
      comeFromGZHH,arriveGZHH,province,
      addressInLiuZhou,arriveLiuZhou,leaveLiuZhou,leaveHubei,leaveHubeiWay,leaveTogetherPersonName,
      manageMethods,touchHuBeiPerson,touchHuBeiPersonName,touchHuBeiTime,touchHuBeiDescription,schoolClass,myHealth,temperature,myfamilyHealth,confirmIll,intro,ip,createTime)
      values(null,#{identity},#{teacherNumber},#{studentNumber},#{sex},#{name},#{registeredPlace},
      #{identityCard},#{tel},#{department},#{workType},#{practice},#{practiceWorkStatus},#{comefromHuBei},#{comefromWuHan},#{arriveHuBei},#{arriveWuHan},#{stayInHubei},#{epidemicArea},
      #{comeFromGZHH},#{arriveGZHH},#{province},
      #{addressInLiuZhou},#{arriveLiuZhou},#{leaveLiuZhou},#{leaveHubei},#{leaveHubeiWay},#{leaveTogetherPersonName},
      #{manageMethods},#{touchHuBeiPerson},#{touchHuBeiPersonName},#{touchHuBeiTime},#{touchHuBeiDescription},#{schoolClass},#{myHealth},#{temperature},#{myfamilyHealth},#{confirmIll},#{intro},#{ip},now())
</insert>


    <delete id="delete" >
        delete from questionnaire where id=#{id}
    </delete>

    <delete id="deletes" >
        delete from questionnaire where id in
        <foreach item="item" collection="array" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <select id="total"  resultType="Integer">
        select count(1) from questionnaire
    </select>

    <!--统一查询的条件，方便用于分页等查询，这里提供给query,querySize,readAll调用-->
    <sql id="queryWhere">
        <if test="objectQuery!=null">
            <where>
                <if test="objectQuery.identity!=null and objectQuery.identity.length()>0">
                    and identity=#{objectQuery.identity}
                </if>
                <if test="objectQuery.schoolClass!=null and objectQuery.schoolClass.length()>0">
                    <!-- bind，重新定义一个变量，可用于模糊查询等，并且可以直接覆盖原变量 -->
                    <bind name="schoolClass" value="'%' + _parameter.objectQuery.schoolClass + '%'" />
                    and schoolClass like #{schoolClass}
                </if>
                <bind name="department" value="objectQuery.department" />
                <if test="department!=null and department.length()>0">
                    and department=#{department}
                </if>
                <if test="objectQuery.practice!=null">
                    and practice=#{objectQuery.practice}
                </if>
                <if test="objectQuery.myIllQuery!=null">
                    and myHealth!='健康'
                </if>
                <!--如果要查询发热病人 -->
                <if test="objectQuery.feverQuery!=null and objectQuery.feverQuery==true">
                    and locate('发热',myHealth)>0
                </if>
                <if test="objectQuery.practiceWorkStatus!=null and objectQuery.practiceWorkStatus.length()>0">
                    and practiceWorkStatus=#{objectQuery.practiceWorkStatus}
                </if>
                <if test="objectQuery.touchHuBeiPerson!=null">
                    and touchHuBeiPerson=#{objectQuery.touchHuBeiPerson}
                </if>
                <if test="objectQuery.confirmIll!=null">
                    and confirmIll=#{objectQuery.confirmIll}
                </if>
                <if test="objectQuery.comefromHuBei!=null">
                    and comefromHuBei=#{objectQuery.comefromHuBei}
                </if>
                <if test="objectQuery.comefromWuHan!=null">
                    and comefromWuHan=#{objectQuery.comefromWuHan}
                </if>
                <if test="objectQuery.arriveHuBei!=null">
                    and arriveHuBei=#{objectQuery.arriveHuBei}
                </if>
                <if test="objectQuery.arriveWuHan!=null">
                    and arriveWuHan=#{objectQuery.arriveWuHan}
                </if>
                <if test="objectQuery.stayInHubei!=null">
                    and stayInHubei=#{objectQuery.stayInHubei}
                </if>
                <if test="objectQuery.comeFromGZHH!=null">
                    and comeFromGZHH=#{objectQuery.comeFromGZHH}
                </if>
                <if test="objectQuery.arriveGZHH!=null">
                    and arriveGZHH=#{objectQuery.arriveGZHH}
                </if>
                <if test="objectQuery.arriveHuBeiOrWuHanQuery!=null">
                    and arriveHuBei=#{objectQuery.arriveHuBeiOrWuHanQuery} OR arriveWuHan=#{objectQuery.arriveHuBeiOrWuHanQuery}
                </if>
                <if test="objectQuery.studentQuery!=null and objectQuery.studentQuery==true">
                    and ( studentNumber!='' or studentNumber!=null)
                </if>
                <if test="objectQuery.teacherQuery!=null and objectQuery.teacherQuery==true">
                    and ( teacherNumber!='' or teacherNumber!=null)
                </if>
                <if test="objectQuery.teacherNumber!=null and objectQuery.teacherNumber.length()>0">
                   and teacherNumber=#{objectQuery.teacherNumber}
                </if>
                <if test="objectQuery.studentNumber!=null and objectQuery.studentNumber.length()>0">
                    and studentNumber=#{objectQuery.studentNumber}
                </if>
                <if test="objectQuery.schoolClass!=null and objectQuery.schoolClass.length()>0">
                    <!-- bind，重新定义一个变量，可用于模糊查询等，并且可以直接覆盖原变量 -->
                    <bind name="schoolClass" value="'%' + _parameter.objectQuery.schoolClass + '%'" />
                    and schoolClass like #{schoolClass}
                </if>
                <if test="objectQuery.workType!=null and objectQuery.workType.length()>0">
                    and workType=#{objectQuery.workType}
                </if>
                <if test="objectQuery.queryDate!=null">
                    and to_days(#{objectQuery.queryDate})=to_days(createTime)
                </if>
            </where>
        </if>
    </sql>

    <select id="readAll" resultType="Questionnaire">
        select * from questionnaire
        <include refid="queryWhere"></include>
        order by createTime desc
    </select>


    <select id="query" resultType="Questionnaire">
        select * from questionnaire
        <include refid="queryWhere"></include>
        order by createTime desc limit #{offset},#{length}
    </select>

    <select id="querySize" resultType="Integer">
        select count(1)  from questionnaire
        <include refid="queryWhere"></include>
    </select>


    <!--==================================定制查询============================-->


    <select id="getQuestionnaireNumberByTeacherToday" resultType="int">
        select count(id) from questionnaire where teacherNumber=#{teacherNumber} and  to_days(createTime) = to_days(now())
    </select>

    <select id="getQuestionnaireNumberByStudentToday" resultType="int">
        select count(id) from questionnaire where studentNumber=#{studentNumber} and  to_days(createTime) = to_days(now())
    </select>



</mapper>